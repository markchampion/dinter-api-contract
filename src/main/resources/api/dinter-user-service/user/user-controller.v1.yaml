openapi: 3.0.0
info:
  title: Dinter User Management API
  version: 1.0.0
  contact:
    name: User Management API Support
tags:
  - name: User
    description: Operations related to User object.
servers:
  - url: http://{camHost}/v1
    variables:
      camHost:
        default: localhost
        description: Service host for exposing the service to internal services.

paths:
  /users/{id}/status:
    get:
      summary: GET v1/users/{id}/status
      operationId: getUserStatus
      parameters:
        - name: id
          in: path
          description: User id to get user status
          required: true
          schema:
            type: string
      responses:
        200:
          description: User status found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatus'
        400:
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /users/profile:
    get:
      summary: GET v1/users/profile
      operationId: getUsersProfile
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        200:
          description: Users found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
        400:
          description: 'Users profile not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /users/register:
    post:
      summary: POST v1/users/register
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
        required: true
      responses:
        201:
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: 'User already exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /users/{username}/verify:
    put:
      summary: PUT v1/users/{username}/verify
      operationId: verifyUser
      parameters:
        - name: username
          in: path
          description: Username of the user to verify
          required: true
          schema:
            type: string
        - name: otp
          in: query
          description: OTP entered by the user
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'User verified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: 'User not found or OTP mismatch'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /users/{username}/resend-otp:
    get:
      summary: GET v1/users{username}/resent-otp
      operationId: resendOtp
      parameters:
        - name: username
          in: path
          description: Username of the user to resend OTP
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'OTP resent'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: 'User not found'
          content:
              application/json:
                schema:
                    $ref: '#/components/schemas/ApiResponse'


components:
  schemas:
    UserRegisterRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
          pattern: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
        phone:
          type: string
          pattern: ^[0-9]{10}$
      required:
        - username
        - password

    UserStatus:
      type: string
      enum:
        - CREATED
        - ACTIVE
        - INACTIVE
        - DELETED

    UserProfile:
      type: object
      properties:
        avatarImageUrl:
          type: string
        displayName:
          type: string
          maxLength: 255
        birthDate:
          type: string
          format: date-time
        gender:
          type: boolean
        expectedGender:
          type: boolean
        relationshipGoal:
          type: string
          maxLength: 255
        education:
          type: string
          maxLength: 255
        jobTitle:
          type: string
          maxLength: 255
        companyName:
          type: string
          maxLength: 255
        about:
          type: string
          maxLength: 1024

    ApiResponse:
      type: object
      properties:
        statusCode:
          $ref: '#/components/schemas/ResponseCode'
        data:
          type: object
    ResponseCode:
      type: string
      enum:
        - USER_REGISTERED
        - USER_VERIFIED
        - OTP_RESENT
        - USER_NOT_FOUND
        - OTP_MISMATCH
        - USER_INACTIVE
        - USER_ALREADY_EXISTS
        - USER_PROFILE_NOT_FOUND

